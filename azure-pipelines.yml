# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  # Manually adjust the version number as needed for semantic versioning.
  # Revision or Patch is auto-incremented.
  major: 2 # MAJOR version when you make incompatible API changes
  minor: 1 # MINOR version when you add functionality in a backwards compatible manner
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  
stages:
- stage:
  displayName: Create Build
  jobs:
  - job: Build_Release
    variables:
      prpatch: $[counter(variables['system.pullrequest.pullrequestid'], 0)]
      brpatch: $[counter(variables['build.sourcebranchname'], 0)]
      patch: $[counter(variables['minor'], 0)] # version when you make backwards compatible bug fixes.
    steps:

      - task: Bash@3
        inputs:
          filePath: 'coverage_test.sh'
          arguments: '{{HostUrl}} {{username}} {{password}} 20'
        name: RunCodeCoverage

      # This step builds PR’s automatically and successfully before merging to the master branch
      # Uses system.pullrequest.pullrequestid as prefix and start our seed value with 0, so for each run of this PR , 
      # the value of variable prpatch will increment as 0,1,2…and build will be versioned as 2.0-PullRequest.0,1,2,3…n
      # Update the version of the running pipeline using Azure DevOps’s build.updatebuildnumber function.
      - task: PowerShell@2
        displayName: Set the prereleaseVersionNumber variable with PR build
        inputs:
          targetType: 'inline'
          script: | 
           [string] $prereleaseVersionNumber = "$(major).$(minor)-PullRequest.$(prpatch)"
           Write-Host "##vso[task.setvariable variable=prereleaseVersionNumber;]$prereleaseVersionNumber"
           Write-Host  "##vso[build.updatebuildnumber]$prereleaseVersionNumber"   
        condition: and(ne(variables.isMaster, true), eq(variables.isPullRequest, true))
        name: SetPRBuildName

      # This step only runs when the build.reason is not equal to Pull Request.
      # Uses system.Build.SourceBranchName as prefix and start our seed value with 0, so for each run of this branch
      # the value of variable prpatch will increment as 0,1,2…and build will be versioned as 2.0-BRANCHNAME.0,1,2,3…n 
      # Update the version of the running pipeline using Azure DevOps’s build.updatebuildnumber function.
      - task: PowerShell@2
        displayName: Set the prereleaseVersionNumber variable with branch build
        inputs:
          targetType: 'inline'
          script: | 
           [string] $prereleaseVersionNumber = "$(major).$(minor)-$(Build.SourceBranchName).$(brpatch)"
           Write-Host "Setting the prerelease version number variable to '$prereleaseVersionNumber'."
           Write-Host "##vso[task.setvariable variable=prereleaseVersionNumber;]$prereleaseVersionNumber"
           Write-Host "##vso[build.updatebuildnumber]$prereleaseVersionNumber" 
        condition: and(ne(variables.isMaster, true), ne(variables.isPullRequest, true))
        name: SetBranchBuildName
      
      # Verify variables.prereleaseVersionNumber is updated
      - script: |
          echo $(prereleaseVersionNumber)
        condition: ne(variables.isMaster, true)

      # This step runs only when Build.SourceBranch is master.
      # It versions the build with the declared variable minor as prefix and 0 as seed.
      # Once the build is completed after the merge, we should see version 2.0.0 as the build version for master branch and all subsequent builds will be 2.0.0, 2.0.1, 2.0.2, 3, 4….n
      - task: PowerShell@2
        displayName: Set the releaseVersionNumber variable value with master build
        inputs:
          targetType: 'inline'
          script: | 
           [string] $patchReleaseVersionNumber= "$(major).$(minor).$(patch)"
           Write-Host "##vso[task.setvariable variable=releaseVersionNumber;isOutput=true]$patchReleaseVersionNumber"
           Write-Host "##vso[build.updatebuildnumber]$patchReleaseVersionNumber"
        condition: eq(variables.isMaster, true)
        name: SetMasterBuildName

      # Verify variables.releaseVersionNumber is updated
      - script: |
          echo $(releaseVersionNumber)
        condition: eq(variables.isMaster, true)

      - script: echo 'Hello, world!'
        displayName: 'Run a one-line script'
      - script: |
          echo 'Add other tasks to build, test, and deploy your project.'
          echo 'See https://aka.ms/yaml'
        displayName: 'Run a multi-line script'