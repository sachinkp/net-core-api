# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  # Manually adjust the version number as needed for semantic versioning.
  # Revision or Patch is auto-incremented.
  major: 2 # MAJOR version when you make incompatible API changes
  minor: 1 # MINOR version when you add functionality in a backwards compatible manner
  patch: $[counter(variables['minor'], 0)] # version when you make backwards compatible bug fixes.
  prpatch: $[counter(variables['system.pullrequest.pullrequestid'], 0)]
  brpatch: $[counter(variables['build.sourcebranchname'], 0)]
  prpatchReleaseVersionNumber: "$(major).$(minor)-PullRequest.$(prpatch)"
  brpatchReleaseVersionNumber: "$(major).$(minor)-$(Build.SourceBranchName).$(brpatch)"
  patchReleaseVersionNumber: "$(major).$(minor).$(patch)"
  releaseVersionNumber: 'Set dynamically below in a task'
  prereleaseVersionNumber: 'Set dynamically below in a task'  # Use pre-release version numbers for prereleases 
  FOO: 'Set dynamically below in a task'

stages:
- stage:
  # this stage runs only if the branch is not master
  displayName: Build_Branch_Version_Number
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - job: Build_Branch_Version_Number
    steps:
    # build PR’s automatically and successfully before merging to the master branch
    # Use system.pullrequest.pullrequestid as prefix and start our seed value with 0, so for each run of this PR , 
    # the value of variable prpatch will increment as 0,1,2…and build will be versioned as 2.0-PullRequest.0,1,2,3…n
      - bash: |
          BAR="runtime value"
          echo "##vso[task.setvariable variable=FOO;]$BAR"
          echo $(FOO)
        name: SetFoo
      
      - task: PowerShell@2
        displayName: Set generic datatime prereleaseVersionNumber variable value
        inputs:
          targetType: 'inline'
          script: |
            [string] $dateTime = (Get-Date -Format 'yyyyMMddTHHmmss')
            [string] $prereleaseVersionNumber = "$(brpatchReleaseVersionNumber)-ci$dateTime"
            Write-Host "Setting the prerelease version number variable to '$prereleaseVersionNumber'."
            Write-Host "##vso[task.setvariable variable=prereleaseVersionNumber;]$prereleaseVersionNumber"
            Write-Host $(prereleaseVersionNumber)
        name: SetGeneralBuildNumber
        
      - task: PowerShell@2
        displayName: Set the prereleaseVersionNumber variable value
        inputs:
          targetType: 'inline'
          script: | 
           Write-Host "##vso[task.setvariable variable=prereleaseVersionNumber;]$(prpatchReleaseVersionNumber)"
           Write-Host "$(prereleaseVersionNumber)"
           Write-Host  "##vso[build.updatebuildnumber]$(prpatchReleaseVersionNumber)"
        condition: eq(variables['Build.Reason'], 'PullRequest')
        name: SetPRBuildName

      # Update the version of the running pipeline using Azure DevOps’s build.updatebuildnumber function. 
      # This function only runs when the build.reason is not equal to Pull Request.
      - task: PowerShell@2
        displayName: Set the prereleaseVersionNumber variable value
        inputs:
          targetType: 'inline'
          script: | 
           [string] $prereleaseVersionNumber = "$(brpatchReleaseVersionNumber)"
           Write-Host "Setting the prerelease version number variable to '$prereleaseVersionNumber'."
           Write-Host "##vso[task.setvariable variable=prereleaseVersionNumber;]$(brpatchReleaseVersionNumber)"
           Write-Host "$(prereleaseVersionNumber)"
           Write-Host "##vso[build.updatebuildnumber]$(brpatchReleaseVersionNumber)"
        condition: ne(variables['Build.Reason'], 'PullRequest')
        name: SetBranchBuildName

- stage:
  # The stage Build_Master_Version_Number will run only when Build.SourceBranch is master.
  # It versions the build with the declared variable minor as prefix and 0 as seed.
  # Once the build is completed after the merge, we should see version 2.0.0 as the build version for master branch and all subsequent builds will be 2.0.0, 2.0.1, 2.0.2, 3, 4….n
  displayName: Build_Master_Version_Number
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - job: Build_Master_Version_Number
    steps:
      - bash: |
           echo "##vso[task.setvariable variable=releaseVersionNumber;]$(patchReleaseVersionNumber)"
           echo "##vso[build.updatebuildnumber]$(patchReleaseVersionNumber)"
           echo "$(releaseVersionNumber)"
        name: SetMasterBuildName

- stage: Build_Steps
  displayName: Build_Steps
  condition: always()
  jobs:  
  - job: Build_Steps
    displayName: Build_Steps
    steps:
    - script: echo 'Hello, world!'
      displayName: 'Run a one-line script'
    - script: |
        echo 'Add other tasks to build, test, and deploy your project.'
        echo 'See https://aka.ms/yaml'
      displayName: 'Run a multi-line script'
